<div
  x-cloak
  x-data={"{
    open_select_economic_event: #{@open},
    selected_economic_event: ''
   }"}
  @keydown.escape.stop="open_select_economic_event = false"
>
  <div class="px-2 mt-4">
    <div class="mb-2 text-xs font-semibold uppercase">
      {l("Do you want to perform an action")}
      <span :if={e(@resource, :id, nil)}>
        {l("on this resource")}
      </span>?
    </div>
    <div class="flex space-x-3">
      <button
        :if={!e(@resource, :id, nil)}
        @click="selected_economic_event = 'produce'; open_select_economic_event = false"
        type="button"
        class="btn btn-primary inline-flex items-center text-sm font-medium  normal-case"
      >
        {l("Produce")}
      </button>
      <button
        :if={!e(@resource, :id, nil)}
        @click="selected_economic_event = 'raise'; open_select_economic_event = false"
        type="button"
        class="btn btn-primary inline-flex items-center text-sm font-medium  normal-case"
      >
        {l("Raise")}
      </button>
      <button
        @click="selected_economic_event = 'transfer'; open_select_economic_event = false"
        type="button"
        class="btn btn-primary inline-flex items-center text-sm font-medium  normal-case"
      >
        {l("Transfer")}
      </button>
      <button
        @click="selected_economic_event = 'use'; open_select_economic_event = false"
        type="button"
        class="btn btn-primary inline-flex items-center text-sm font-medium  normal-case"
      >
        {l("Use")}
      </button>
      <button
        @click="selected_economic_event = 'consume'; open_select_economic_event = false"
        type="button"
        class="btn btn-primary inline-flex items-center text-sm font-medium  normal-case"
      >
        {l("Consume")}
      </button>
      <button
        @click="selected_economic_event = 'lower'; open_select_economic_event = false"
        type="button"
        class="btn btn-primary inline-flex items-center text-sm font-medium  normal-case"
      >
        {l("Lower")}
      </button>
    </div>
  </div>

  <!-- prepare a modal for every type: -->

  <div
    x-show="selected_economic_event === 'produce'"
    class="fixed inset-0 z-30 overflow-y-auto"
    aria-labelledby="modal-title"
    x-ref="dialog"
    aria-modal="true"
  >
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div
        x-show="selected_economic_event === 'produce'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-60"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60"
        x-transition:leave-end="opacity-0"
        x-description="Background overlay, show/hide based on modal state."
        class="fixed inset-0 transition-opacity bg-base-100 bg-opacity-40"
        aria-hidden="true"
      />
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div
        x-show="selected_economic_event === 'produce'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-description="Modal panel, show/hide based on modal state."
        class="inline-block text-left align-bottom transition-all transform bg-base-100 rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
      >
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive
          units={e(@units, [])}
          action="produce"
          output_of_id={e(@process, :id, nil)}
          remove="selected_economic_event=''"
          extra_components={@extra_components}
        />
      </div>
    </div>
  </div>

  <div
    x-show="selected_economic_event === 'raise'"
    class="fixed inset-0 z-30 overflow-y-auto"
    aria-labelledby="modal-title"
    x-ref="dialog"
    aria-modal="true"
  >
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div
        x-show="selected_economic_event === 'raise'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-60"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60"
        x-transition:leave-end="opacity-0"
        x-description="Background overlay, show/hide based on modal state."
        class="fixed inset-0 transition-opacity bg-base-100 bg-opacity-40"
        aria-hidden="true"
      />
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div
        x-show="selected_economic_event === 'raise'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-description="Modal panel, show/hide based on modal state."
        class="inline-block text-left align-bottom transition-all transform bg-base-100 rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
      >
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive
          units={e(@units, [])}
          action="raise"
          remove="selected_economic_event=''"
          extra_components={@extra_components}
        />
      </div>
    </div>
  </div>

  <div
    x-show="selected_economic_event === 'transfer'"
    class="fixed inset-0 z-30 overflow-y-auto"
    aria-labelledby="modal-title"
    x-ref="dialog"
    aria-modal="true"
  >
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div
        x-show="selected_economic_event === 'transfer'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-60"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60"
        x-transition:leave-end="opacity-0"
        x-description="Background overlay, show/hide based on modal state."
        class="fixed inset-0 transition-opacity bg-base-100 bg-opacity-40"
        aria-hidden="true"
      />
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div
        x-show="selected_economic_event === 'transfer'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-description="Modal panel, show/hide based on modal state."
        class="inline-block text-left align-bottom transition-all transform bg-base-100 rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
      >
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive
          units={e(@units, [])}
          action="transfer"
          remove="selected_economic_event=''"
          economic_resource_selected={preselect(@resource)}
          extra_components={@extra_components}
        />
      </div>
    </div>
  </div>

  <div
    x-show="selected_economic_event === 'use'"
    class="fixed inset-0 z-30 overflow-y-auto"
    aria-labelledby="modal-title"
    x-ref="dialog"
    aria-modal="true"
  >
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div
        x-show="selected_economic_event === 'use'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-60"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60"
        x-transition:leave-end="opacity-0"
        x-description="Background overlay, show/hide based on modal state."
        class="fixed inset-0 transition-opacity bg-base-100 bg-opacity-40"
        aria-hidden="true"
      />
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div
        x-show="selected_economic_event === 'use'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-description="Modal panel, show/hide based on modal state."
        class="inline-block text-left align-bottom transition-all transform bg-base-100 rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
      >
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive
          units={e(@units, [])}
          action="use"
          input_of_id={e(@process, :id, nil)}
          economic_resource_selected={preselect(@resource)}
          remove="selected_economic_event=''"
          extra_components={@extra_components}
        />
      </div>
    </div>
  </div>

  <div
    x-show="selected_economic_event === 'consume'"
    class="fixed inset-0 z-30 overflow-y-auto"
    aria-labelledby="modal-title"
    x-ref="dialog"
    aria-modal="true"
  >
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div
        x-show="selected_economic_event === 'consume'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-60"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60"
        x-transition:leave-end="opacity-0"
        x-description="Background overlay, show/hide based on modal state."
        class="fixed inset-0 transition-opacity bg-base-100 bg-opacity-40"
        aria-hidden="true"
      />
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div
        x-show="selected_economic_event === 'consume'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-description="Modal panel, show/hide based on modal state."
        class="inline-block text-left align-bottom transition-all transform bg-base-100 rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
      >
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive
          units={e(@units, [])}
          action="consume"
          input_of_id={e(@process, :id, nil)}
          remove="selected_economic_event=''"
          economic_resource_selected={preselect(@resource)}
          extra_components={@extra_components}
        />
      </div>
    </div>
  </div>

  <div
    x-show="selected_economic_event === 'lower'"
    class="fixed inset-0 z-30 overflow-y-auto"
    aria-labelledby="modal-title"
    x-ref="dialog"
    aria-modal="true"
  >
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div
        x-show="selected_economic_event === 'lower'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-60"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60"
        x-transition:leave-end="opacity-0"
        x-description="Background overlay, show/hide based on modal state."
        class="fixed inset-0 transition-opacity bg-base-100 bg-opacity-40"
        aria-hidden="true"
      />
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div
        x-show="selected_economic_event === 'lower'"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-60 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-description="Modal panel, show/hide based on modal state."
        class="inline-block text-left align-bottom transition-all transform bg-base-100 rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
      >
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive
          units={e(@units, [])}
          action="lower"
          economic_resource_selected={preselect(@resource)}
          remove="selected_economic_event=''"
          extra_components={@extra_components}
        />
      </div>
    </div>
  </div>
</div>
