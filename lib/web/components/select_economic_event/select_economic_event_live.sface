<div
  x-cloak
  x-data="{
    open_select_economic_event: false,
    selected_economic_event: ''
   }"
  @keydown.escape.stop="open_select_economic_event = false"
  >
  <div class="px-2 mt-4">
    <div class="mb-2 text-xs font-semibold uppercase dark:text-gray-300">{l "Choose which action you want to perform"}</div>
    <div class="flex space-x-4">
      <button 
        @click="{selected_economic_event = 'produce'; open_select_economic_event = false}"
        type="button" 
        class="inline-flex items-center px-4 py-2 text-sm font-medium text-pink-400 bg-transparent border border-pink-400 rounded-md shadow-sm hover:bg-pink-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        {l "Produce"}
      </button>
      <button 
        @click="{selected_economic_event = 'transfer'; open_select_economic_event = false}"
        type="button" 
        class="inline-flex items-center px-4 py-2 text-sm font-medium text-pink-400 bg-transparent border border-pink-400 rounded-md shadow-sm hover:bg-pink-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        {l "Transfer"}
      </button>
      <button 
        @click="{selected_economic_event = 'consume'; open_select_economic_event = false}"
        type="button" 
        class="inline-flex items-center px-4 py-2 text-sm font-medium text-pink-400 bg-transparent border border-pink-400 rounded-md shadow-sm hover:bg-pink-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        {l "Consume"}
      </button>
      <button 
        @click="{selected_economic_event = 'use'; open_select_economic_event = false}"
        type="button" 
        class="inline-flex items-center px-4 py-2 text-sm font-medium text-pink-400 bg-transparent border border-pink-400 rounded-md shadow-sm hover:bg-pink-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        {l "Use"}
      </button>
    </div>
  </div>
    
  <div x-show="selected_economic_event === 'transfer'" class="fixed inset-0 z-10 overflow-y-auto" aria-labelledby="modal-title" x-ref="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div x-show="selected_economic_event === 'transfer'" x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="ease-in duration-200" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" x-description="Background overlay, show/hide based on modal state." class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75"  aria-hidden="true"></div>
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div x-show="selected_economic_event === 'transfer'" x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100" x-transition:leave="ease-in duration-200" x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100" x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" x-description="Modal panel, show/hide based on modal state." class="inline-block text-left align-bottom transition-all transform bg-white rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive 
          units={e(assigns, :units, [])}
          action="transfer" 
          output_of_id={e(assigns, :output_of_id, nil)} 
          remove="selected_economic_event=''" />
      </div>
    </div>
  </div>
  <div x-show="selected_economic_event === 'produce'" class="fixed inset-0 z-10 overflow-y-auto" aria-labelledby="modal-title" x-ref="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div x-show="selected_economic_event === 'produce'" x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="ease-in duration-200" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" x-description="Background overlay, show/hide based on modal state." class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75"  aria-hidden="true"></div>
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div x-show="selected_economic_event === 'produce'" x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100" x-transition:leave="ease-in duration-200" x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100" x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" x-description="Modal panel, show/hide based on modal state." class="inline-block text-left align-bottom transition-all transform bg-white rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive 
          units={e(assigns, :units, [])} 
          action="produce" 
          output_of_id={e(assigns, :output_of_id, nil)} 
          remove="selected_economic_event=''" />
      </div>
    </div>
  </div>
  <div x-show="selected_economic_event === 'consume'" class="fixed inset-0 z-10 overflow-y-auto" aria-labelledby="modal-title" x-ref="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div x-show="selected_economic_event === 'consume'" x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="ease-in duration-200" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" x-description="Background overlay, show/hide based on modal state." class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75"  aria-hidden="true"></div>
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div x-show="selected_economic_event === 'consume'" x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100" x-transition:leave="ease-in duration-200" x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100" x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" x-description="Modal panel, show/hide based on modal state." class="inline-block text-left align-bottom transition-all transform bg-white rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive 
          units={e(assigns, :units, [])} 
          action="consume" 
          output_of_id={e(assigns, :output_of_id, nil)}  
          remove="selected_economic_event=''" />
      </div>
    </div>
  </div>
  <div x-show="selected_economic_event === 'use'" class="fixed inset-0 z-10 overflow-y-auto" aria-labelledby="modal-title" x-ref="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
      <div x-show="selected_economic_event === 'use'" x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="ease-in duration-200" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" x-description="Background overlay, show/hide based on modal state." class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75"  aria-hidden="true"></div>
      <!-- This element is to trick the browser into centering the modal contents. -->
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
      <div x-show="selected_economic_event === 'use'" x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100" x-transition:leave="ease-in duration-200" x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100" x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" x-description="Modal panel, show/hide based on modal state." class="inline-block text-left align-bottom transition-all transform bg-white rounded-lg shadow-xl sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
        <Bonfire.UI.ValueFlows.CreateEconomicEventLive 
          units={e(assigns, :units, [])} 
          action="use" 
          output_of_id={e(assigns, :output_of_id, nil)}  
          remove="selected_economic_event=''" />
      </div>
    </div>
  </div>
</div>
